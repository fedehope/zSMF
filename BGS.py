from scipy.interpolate import interp1d

from Data import Data
import numpy as np
from astropy.cosmology import Planck13


class BGS(Data):
    def __init__(self, file, is_bgs_bright=True):
        super().__init__(file)

        self.f_area = (173.641 / (4. * np.pi * (180 / np.pi) ** 2))
        self.is_bgs_bright = is_bgs_bright
        if is_bgs_bright:
            self.is_bgs = 'is_bgs_bright'
        else:
            self.is_bgs = 'is_bgs_faint'

        bgs_all = self.get_data()
        bgs = bgs_all[bgs_all[self.is_bgs]]
        self.z = bgs['Z_HP'].data
        self.x = bgs['provabgs_logMstar'].data
        self.x_median = np.median(self.x, axis=1)
        self.w_zfail = bgs['provabgs_w_zfail'].data
        self.w_fib = bgs['provabgs_w_fibassign'].data
        self.w_spec = self.w_zfail * self.w_fib
        self.vmax = bgs['Vmax'].data

        # For jack knife
        self.ra = bgs['RA'].data
        self.dec = bgs['DEC'].data

        # Setting attributes for the mass completeness limit parameters
        self.f = -1.34199453
        self.b = 13.90578909
        self.c = 8.53522654

    def select_galaxies(self, zmin, zmax):
        """Return z, x, x_median, w_spec, vmax for galaxies between (zmin,zmax)"""
        mask_zlim = (self.z > zmin) & (self.z < zmax) & (self.x_median > self.mass_completeness_limit_bgs(self.z))

        v_zmin = Planck13.comoving_volume(zmin).value * Planck13.h ** 3 * self.f_area  # (Mpc/h)^3
        v_zmax = Planck13.comoving_volume(zmax).value * Planck13.h ** 3 * self.f_area  # (Mpc/h)^3

        z = self.z[mask_zlim]
        x = self.x[mask_zlim]
        x_median = self.x_median[mask_zlim]
        w_zfail = self.w_zfail[mask_zlim]
        w_fib = self.w_fib[mask_zlim]
        w_spec = self.w_spec[mask_zlim]
        vmax = (self.vmax.clip(v_zmin, v_zmax) - v_zmin)[mask_zlim]

        return z, x, x_median, w_spec, vmax

    def mass_completeness_limit(self, z):
        return 4 * np.pi * self.f * z ** 2 + self.b * z + self.c

    def mass_completeness_limit_bgs(self, z):
        x_values = np.array([0.00247985, 0.00483082, 0.00656047, 0.0090045, 0.01228954,
                             0.01468146, 0.01739703, 0.01982065, 0.02223816, 0.02478942,
                             0.02718216, 0.0297723, 0.03214576, 0.03475644, 0.03725439,
                             0.03969578, 0.04231814, 0.04471862, 0.04726608, 0.04971804,
                             0.05217666, 0.05485575, 0.05714361, 0.05983116, 0.0622433,
                             0.06477037, 0.06729212, 0.0696601, 0.07221736, 0.07470074,
                             0.07726848, 0.07970581, 0.08235858, 0.08472435, 0.08723007,
                             0.08963203, 0.09228077, 0.09477242, 0.09729331, 0.099802,
                             0.10227854, 0.10469317, 0.10715788, 0.10972896, 0.11231016,
                             0.11474048, 0.11718, 0.11978621, 0.12227634, 0.12479607,
                             0.12729936, 0.12974797, 0.13225808, 0.13471149, 0.13727515,
                             0.13970204, 0.14227686, 0.14457675, 0.14727102, 0.14978783,
                             0.15221812, 0.15465339, 0.15732456, 0.15978838, 0.1621385,
                             0.16474496, 0.16723761, 0.16974835, 0.17225687, 0.17476975,
                             0.17729319, 0.17983345, 0.18223385, 0.18479195, 0.18722791,
                             0.1897866, 0.19230325, 0.19474093, 0.1972761, 0.19978505,
                             0.20218162, 0.20478321, 0.20722114, 0.20978526, 0.2123442,
                             0.21464457, 0.21721705, 0.21974108, 0.22214348, 0.22478031,
                             0.22732483, 0.22962546, 0.23230192, 0.23478154, 0.23726658,
                             0.23973219, 0.24223737, 0.24477807, 0.24733377, 0.24963889,
                             0.25230877, 0.2547754, 0.25726801, 0.25967258, 0.26232256,
                             0.26477256, 0.26728391, 0.26966953, 0.27217287, 0.27460324,
                             0.27722196, 0.27959586, 0.28229134, 0.2848037, 0.28725984,
                             0.28985701, 0.2923195, 0.29462396, 0.29705607])

        y_values = np.array([6.19233606, 6.83089859, 7.19541283, 7.49541767, 7.73446394,
                             7.97573148, 8.1206893, 8.28289916, 8.38297483, 8.4857448,
                             8.5662122, 8.65428108, 8.68919015, 8.79760012, 8.85287516,
                             8.91898337, 9.00431108, 9.04462424, 9.09902614, 9.12211824,
                             9.19599217, 9.27656627, 9.28617265, 9.35747078, 9.38232742,
                             9.42622197, 9.48121354, 9.49533128, 9.55465837, 9.58076478,
                             9.61429673, 9.64659735, 9.68782778, 9.7159304, 9.75738293,
                             9.79091068, 9.81607921, 9.82226304, 9.85758522, 9.87375352,
                             9.8906075, 9.90740924, 9.9281017, 9.97121565, 9.98271625,
                             9.99167673, 10.01813817, 10.04717844, 10.07974563, 10.09122367,
                             10.09460286, 10.1539076, 10.14871284, 10.16391119, 10.18545648,
                             10.20465581, 10.23759639, 10.24537951, 10.25409408, 10.27692096,
                             10.30349627, 10.3382326, 10.33327252, 10.35523964, 10.35273232,
                             10.37603491, 10.41671427, 10.41610546, 10.43212978, 10.47420657,
                             10.46000597, 10.47431897, 10.48711649, 10.51094253, 10.51319548,
                             10.52246781, 10.55200452, 10.56919663, 10.56833965, 10.58467215,
                             10.61157816, 10.60453819, 10.63106187, 10.63100251, 10.63726941,
                             10.65600309, 10.66358378, 10.67474176, 10.69383125, 10.69470662,
                             10.71030144, 10.72679253, 10.73585073, 10.75277773, 10.76502898,
                             10.78441052, 10.78582517, 10.8062511, 10.80029193, 10.80723995,
                             10.83403985, 10.87394328, 10.86794826, 10.87265313, 10.89667329,
                             10.88012479, 10.87382357, 10.92230226, 10.91554066, 10.91910413,
                             10.93963065, 10.95808569, 10.95081633, 10.97014478, 10.99860375,
                             11.01836781, 11.03326512, 11.03070553, 11.03879802])

        f = interp1d(x_values, y_values, fill_value='extrapolate')
        return f(z)

    def get_number_galaxies(self):
        if self.z.shape[0] == self.x.shape[0]:
            return self.z.shape[0]
